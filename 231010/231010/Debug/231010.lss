
231010.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000548  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa4  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000457  00000000  00000000  000018ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000355  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000024c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	54 c2       	rjmp	.+1192   	; 0x544 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>

int main(void)
{	
	//과제#3
	DDRA=0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	8b bb       	out	0x1b, r24	; 27
	DDRE = DDRE & (~(1<<PINE4) & ~(1<<PINE5));
  a6:	82 b1       	in	r24, 0x02	; 2
  a8:	8f 7c       	andi	r24, 0xCF	; 207
  aa:	82 b9       	out	0x02, r24	; 2
	int i_push=0;//스위치 누른 횟수를 저장하는 변수
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
	int i_time=1000;//딜레이 할 시간 변수
	
    while (1)
    {
		if (PORTA==0x01)
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	09 f0       	breq	.+2      	; 0xb8 <main+0x1a>
  b6:	7d c0       	rjmp	.+250    	; 0x1b2 <main+0x114>
  b8:	76 c0       	rjmp	.+236    	; 0x1a6 <main+0x108>
		{
			for(int j=1;j<8;j++)
			{
				if(!(PINE & (1<<PINE4)))
  ba:	0c 9b       	sbis	0x01, 4	; 1
  bc:	07 c0       	rjmp	.+14     	; 0xcc <main+0x2e>
  be:	0c c0       	rjmp	.+24     	; 0xd8 <main+0x3a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	e0 e9       	ldi	r30, 0x90	; 144
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x32>
  cc:	8a ef       	ldi	r24, 0xFA	; 250
  ce:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	b1 f7       	brne	.-20     	; 0xc0 <main+0x22>
				{
					_delay_ms(25);
					i_push=i_push-1;
  d4:	21 97       	sbiw	r28, 0x01	; 1
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <main+0x56>
				}
				else if(!(PINE & (1<<PINE5)))
  d8:	0d 9b       	sbis	0x01, 5	; 1
  da:	07 c0       	rjmp	.+14     	; 0xea <main+0x4c>
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <main+0x56>
  de:	e0 e9       	ldi	r30, 0x90	; 144
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x50>
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	b1 f7       	brne	.-20     	; 0xde <main+0x40>
				{
					_delay_ms(25);
					i_push=i_push+1;
  f2:	21 96       	adiw	r28, 0x01	; 1
				}
				i_time=1000+(100*i_push);
  f4:	84 e6       	ldi	r24, 0x64	; 100
  f6:	8c 9f       	mul	r24, r28
  f8:	b0 01       	movw	r22, r0
  fa:	8d 9f       	mul	r24, r29
  fc:	70 0d       	add	r23, r0
  fe:	11 24       	eor	r1, r1
 100:	68 51       	subi	r22, 0x18	; 24
 102:	7c 4f       	sbci	r23, 0xFC	; 252
				if(i_time<=100)
 104:	65 36       	cpi	r22, 0x65	; 101
 106:	71 05       	cpc	r23, r1
 108:	2c f0       	brlt	.+10     	; 0x114 <main+0x76>
				{
					i_push=-9;
					i_time=100;
				}
				else if(i_time>=2000)
 10a:	60 3d       	cpi	r22, 0xD0	; 208
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	78 07       	cpc	r23, r24
 110:	34 f4       	brge	.+12     	; 0x11e <main+0x80>
 112:	09 c0       	rjmp	.+18     	; 0x126 <main+0x88>
				}
				i_time=1000+(100*i_push);
				if(i_time<=100)
				{
					i_push=-9;
					i_time=100;
 114:	64 e6       	ldi	r22, 0x64	; 100
 116:	70 e0       	ldi	r23, 0x00	; 0
					i_push=i_push+1;
				}
				i_time=1000+(100*i_push);
				if(i_time<=100)
				{
					i_push=-9;
 118:	c7 ef       	ldi	r28, 0xF7	; 247
 11a:	df ef       	ldi	r29, 0xFF	; 255
 11c:	04 c0       	rjmp	.+8      	; 0x126 <main+0x88>
					i_time=100;
				}
				else if(i_time>=2000)
				{
					i_push=10;
					i_time=2000;
 11e:	60 ed       	ldi	r22, 0xD0	; 208
 120:	77 e0       	ldi	r23, 0x07	; 7
					i_push=-9;
					i_time=100;
				}
				else if(i_time>=2000)
				{
					i_push=10;
 122:	ca e0       	ldi	r28, 0x0A	; 10
 124:	d0 e0       	ldi	r29, 0x00	; 0
					i_time=2000;
				}
				_delay_ms(i_time);
 126:	07 2e       	mov	r0, r23
 128:	00 0c       	add	r0, r0
 12a:	88 0b       	sbc	r24, r24
 12c:	99 0b       	sbc	r25, r25
 12e:	f3 d0       	rcall	.+486    	; 0x316 <__floatsisf>
 130:	4b 01       	movw	r8, r22
 132:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	4a e7       	ldi	r20, 0x7A	; 122
 13a:	55 e4       	ldi	r21, 0x45	; 69
 13c:	78 d1       	rcall	.+752    	; 0x42e <__mulsf3>
 13e:	6b 01       	movw	r12, r22
 140:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	40 e8       	ldi	r20, 0x80	; 128
 148:	5f e3       	ldi	r21, 0x3F	; 63
 14a:	b3 d0       	rcall	.+358    	; 0x2b2 <__cmpsf2>
 14c:	88 23       	and	r24, r24
 14e:	04 f1       	brlt	.+64     	; 0x190 <main+0xf2>
		__ticks = 1;
	else if (__tmp > 65535)
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	3f ef       	ldi	r19, 0xFF	; 255
 154:	4f e7       	ldi	r20, 0x7F	; 127
 156:	57 e4       	ldi	r21, 0x47	; 71
 158:	c7 01       	movw	r24, r14
 15a:	b6 01       	movw	r22, r12
 15c:	64 d1       	rcall	.+712    	; 0x426 <__gesf2>
 15e:	18 16       	cp	r1, r24
 160:	9c f4       	brge	.+38     	; 0x188 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 e2       	ldi	r20, 0x20	; 32
 168:	51 e4       	ldi	r21, 0x41	; 65
 16a:	c5 01       	movw	r24, r10
 16c:	b4 01       	movw	r22, r8
 16e:	5f d1       	rcall	.+702    	; 0x42e <__mulsf3>
 170:	a4 d0       	rcall	.+328    	; 0x2ba <__fixunssfsi>
 172:	06 c0       	rjmp	.+12     	; 0x180 <main+0xe2>
 174:	80 e9       	ldi	r24, 0x90	; 144
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xda>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	61 50       	subi	r22, 0x01	; 1
 17e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	61 15       	cp	r22, r1
 182:	71 05       	cpc	r23, r1
 184:	b9 f7       	brne	.-18     	; 0x174 <main+0xd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 186:	09 c0       	rjmp	.+18     	; 0x19a <main+0xfc>
 188:	c7 01       	movw	r24, r14
 18a:	b6 01       	movw	r22, r12
 18c:	96 d0       	rcall	.+300    	; 0x2ba <__fixunssfsi>
 18e:	02 c0       	rjmp	.+4      	; 0x194 <main+0xf6>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	cb 01       	movw	r24, r22
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xf8>
				PORTA=PORTA<<1;
 19a:	8b b3       	in	r24, 0x1b	; 27
 19c:	88 0f       	add	r24, r24
 19e:	8b bb       	out	0x1b, r24	; 27
	
    while (1)
    {
		if (PORTA==0x01)
		{
			for(int j=1;j<8;j++)
 1a0:	0f 5f       	subi	r16, 0xFF	; 255
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <main+0x10c>
 1a6:	01 e0       	ldi	r16, 0x01	; 1
 1a8:	10 e0       	ldi	r17, 0x00	; 0
 1aa:	08 30       	cpi	r16, 0x08	; 8
 1ac:	11 05       	cpc	r17, r1
 1ae:	0c f4       	brge	.+2      	; 0x1b2 <main+0x114>
 1b0:	84 cf       	rjmp	.-248    	; 0xba <main+0x1c>
				}
				_delay_ms(i_time);
				PORTA=PORTA<<1;
			}
		}
		if(PORTA==0x80)
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	80 38       	cpi	r24, 0x80	; 128
 1b6:	09 f0       	breq	.+2      	; 0x1ba <main+0x11c>
 1b8:	7b cf       	rjmp	.-266    	; 0xb0 <main+0x12>
 1ba:	74 c0       	rjmp	.+232    	; 0x2a4 <main+0x206>
		{
			for(int j=1;j<8;j++)
			{
				if(!(PINE & (1<<PINE4)))
 1bc:	0c 9b       	sbis	0x01, 4	; 1
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <main+0x130>
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <main+0x13c>
 1c2:	e0 e9       	ldi	r30, 0x90	; 144
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x128>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <main+0x134>
 1ce:	8a ef       	ldi	r24, 0xFA	; 250
 1d0:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	b1 f7       	brne	.-20     	; 0x1c2 <main+0x124>
				{
					_delay_ms(25);
					i_push=i_push-1;
 1d6:	21 97       	sbiw	r28, 0x01	; 1
 1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <main+0x158>
				}
				else if(!(PINE & (1<<PINE5)))
 1da:	0d 9b       	sbis	0x01, 5	; 1
 1dc:	07 c0       	rjmp	.+14     	; 0x1ec <main+0x14e>
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <main+0x158>
 1e0:	e0 e9       	ldi	r30, 0x90	; 144
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <main+0x152>
 1ec:	8a ef       	ldi	r24, 0xFA	; 250
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	b1 f7       	brne	.-20     	; 0x1e0 <main+0x142>
				{
					_delay_ms(25);
					i_push=i_push+1;
 1f4:	21 96       	adiw	r28, 0x01	; 1
				}
				i_time=1000+(100*i_push);
 1f6:	84 e6       	ldi	r24, 0x64	; 100
 1f8:	8c 9f       	mul	r24, r28
 1fa:	b0 01       	movw	r22, r0
 1fc:	8d 9f       	mul	r24, r29
 1fe:	70 0d       	add	r23, r0
 200:	11 24       	eor	r1, r1
 202:	68 51       	subi	r22, 0x18	; 24
 204:	7c 4f       	sbci	r23, 0xFC	; 252
				if(i_time<=100)
 206:	65 36       	cpi	r22, 0x65	; 101
 208:	71 05       	cpc	r23, r1
 20a:	24 f4       	brge	.+8      	; 0x214 <main+0x176>
				{
					i_push=-9;
					i_time=100;
 20c:	64 e6       	ldi	r22, 0x64	; 100
 20e:	70 e0       	ldi	r23, 0x00	; 0
					i_push=i_push+1;
				}
				i_time=1000+(100*i_push);
				if(i_time<=100)
				{
					i_push=-9;
 210:	c7 ef       	ldi	r28, 0xF7	; 247
 212:	df ef       	ldi	r29, 0xFF	; 255
					i_time=100;
				}
				if(i_time>=2000)
 214:	60 3d       	cpi	r22, 0xD0	; 208
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	78 07       	cpc	r23, r24
 21a:	24 f0       	brlt	.+8      	; 0x224 <main+0x186>
				{
					i_push=10;
					i_time=2000;
 21c:	60 ed       	ldi	r22, 0xD0	; 208
					i_push=-9;
					i_time=100;
				}
				if(i_time>=2000)
				{
					i_push=10;
 21e:	77 e0       	ldi	r23, 0x07	; 7
 220:	ca e0       	ldi	r28, 0x0A	; 10
					i_time=2000;
				}
				
				_delay_ms(i_time);
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	07 2e       	mov	r0, r23
 226:	00 0c       	add	r0, r0
 228:	88 0b       	sbc	r24, r24
 22a:	99 0b       	sbc	r25, r25
 22c:	74 d0       	rcall	.+232    	; 0x316 <__floatsisf>
 22e:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 230:	5c 01       	movw	r10, r24
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	4a e7       	ldi	r20, 0x7A	; 122
 238:	55 e4       	ldi	r21, 0x45	; 69
 23a:	f9 d0       	rcall	.+498    	; 0x42e <__mulsf3>
 23c:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 23e:	7c 01       	movw	r14, r24
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e8       	ldi	r20, 0x80	; 128
 246:	5f e3       	ldi	r21, 0x3F	; 63
 248:	34 d0       	rcall	.+104    	; 0x2b2 <__cmpsf2>
 24a:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 24c:	04 f1       	brlt	.+64     	; 0x28e <main+0x1f0>
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	3f ef       	ldi	r19, 0xFF	; 255
 252:	4f e7       	ldi	r20, 0x7F	; 127
 254:	57 e4       	ldi	r21, 0x47	; 71
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	e5 d0       	rcall	.+458    	; 0x426 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 25c:	18 16       	cp	r1, r24
 25e:	9c f4       	brge	.+38     	; 0x286 <main+0x1e8>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e2       	ldi	r20, 0x20	; 32
 266:	51 e4       	ldi	r21, 0x41	; 65
 268:	c5 01       	movw	r24, r10
 26a:	b4 01       	movw	r22, r8
 26c:	e0 d0       	rcall	.+448    	; 0x42e <__mulsf3>
 26e:	25 d0       	rcall	.+74     	; 0x2ba <__fixunssfsi>
 270:	06 c0       	rjmp	.+12     	; 0x27e <main+0x1e0>
 272:	80 e9       	ldi	r24, 0x90	; 144
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x1d8>
 27a:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27c:	71 09       	sbc	r23, r1
 27e:	61 15       	cp	r22, r1
 280:	71 05       	cpc	r23, r1
 282:	b9 f7       	brne	.-18     	; 0x272 <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 284:	09 c0       	rjmp	.+18     	; 0x298 <main+0x1fa>
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	17 d0       	rcall	.+46     	; 0x2ba <__fixunssfsi>
 28c:	02 c0       	rjmp	.+4      	; 0x292 <main+0x1f4>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	cb 01       	movw	r24, r22
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x1f6>
				PORTA=PORTA>>1;
 298:	8b b3       	in	r24, 0x1b	; 27
 29a:	86 95       	lsr	r24
 29c:	8b bb       	out	0x1b, r24	; 27
				PORTA=PORTA<<1;
			}
		}
		if(PORTA==0x80)
		{
			for(int j=1;j<8;j++)
 29e:	0f 5f       	subi	r16, 0xFF	; 255
 2a0:	1f 4f       	sbci	r17, 0xFF	; 255
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <main+0x20a>
 2a4:	01 e0       	ldi	r16, 0x01	; 1
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	08 30       	cpi	r16, 0x08	; 8
 2aa:	11 05       	cpc	r17, r1
 2ac:	0c f4       	brge	.+2      	; 0x2b0 <main+0x212>
 2ae:	86 cf       	rjmp	.-244    	; 0x1bc <main+0x11e>
 2b0:	ff ce       	rjmp	.-514    	; 0xb0 <main+0x12>

000002b2 <__cmpsf2>:
 2b2:	6c d0       	rcall	.+216    	; 0x38c <__fp_cmp>
 2b4:	08 f4       	brcc	.+2      	; 0x2b8 <__cmpsf2+0x6>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret

000002ba <__fixunssfsi>:
 2ba:	94 d0       	rcall	.+296    	; 0x3e4 <__fp_splitA>
 2bc:	88 f0       	brcs	.+34     	; 0x2e0 <__fixunssfsi+0x26>
 2be:	9f 57       	subi	r25, 0x7F	; 127
 2c0:	90 f0       	brcs	.+36     	; 0x2e6 <__fixunssfsi+0x2c>
 2c2:	b9 2f       	mov	r27, r25
 2c4:	99 27       	eor	r25, r25
 2c6:	b7 51       	subi	r27, 0x17	; 23
 2c8:	a0 f0       	brcs	.+40     	; 0x2f2 <__fixunssfsi+0x38>
 2ca:	d1 f0       	breq	.+52     	; 0x300 <__fixunssfsi+0x46>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	88 1f       	adc	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	1a f0       	brmi	.+6      	; 0x2dc <__fixunssfsi+0x22>
 2d6:	ba 95       	dec	r27
 2d8:	c9 f7       	brne	.-14     	; 0x2cc <__fixunssfsi+0x12>
 2da:	12 c0       	rjmp	.+36     	; 0x300 <__fixunssfsi+0x46>
 2dc:	b1 30       	cpi	r27, 0x01	; 1
 2de:	81 f0       	breq	.+32     	; 0x300 <__fixunssfsi+0x46>
 2e0:	9b d0       	rcall	.+310    	; 0x418 <__fp_zero>
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	08 95       	ret
 2e6:	98 c0       	rjmp	.+304    	; 0x418 <__fp_zero>
 2e8:	67 2f       	mov	r22, r23
 2ea:	78 2f       	mov	r23, r24
 2ec:	88 27       	eor	r24, r24
 2ee:	b8 5f       	subi	r27, 0xF8	; 248
 2f0:	39 f0       	breq	.+14     	; 0x300 <__fixunssfsi+0x46>
 2f2:	b9 3f       	cpi	r27, 0xF9	; 249
 2f4:	cc f3       	brlt	.-14     	; 0x2e8 <__fixunssfsi+0x2e>
 2f6:	86 95       	lsr	r24
 2f8:	77 95       	ror	r23
 2fa:	67 95       	ror	r22
 2fc:	b3 95       	inc	r27
 2fe:	d9 f7       	brne	.-10     	; 0x2f6 <__fixunssfsi+0x3c>
 300:	3e f4       	brtc	.+14     	; 0x310 <__fixunssfsi+0x56>
 302:	90 95       	com	r25
 304:	80 95       	com	r24
 306:	70 95       	com	r23
 308:	61 95       	neg	r22
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	8f 4f       	sbci	r24, 0xFF	; 255
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	08 95       	ret

00000312 <__floatunsisf>:
 312:	e8 94       	clt
 314:	09 c0       	rjmp	.+18     	; 0x328 <__floatsisf+0x12>

00000316 <__floatsisf>:
 316:	97 fb       	bst	r25, 7
 318:	3e f4       	brtc	.+14     	; 0x328 <__floatsisf+0x12>
 31a:	90 95       	com	r25
 31c:	80 95       	com	r24
 31e:	70 95       	com	r23
 320:	61 95       	neg	r22
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	8f 4f       	sbci	r24, 0xFF	; 255
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	99 23       	and	r25, r25
 32a:	a9 f0       	breq	.+42     	; 0x356 <__floatsisf+0x40>
 32c:	f9 2f       	mov	r31, r25
 32e:	96 e9       	ldi	r25, 0x96	; 150
 330:	bb 27       	eor	r27, r27
 332:	93 95       	inc	r25
 334:	f6 95       	lsr	r31
 336:	87 95       	ror	r24
 338:	77 95       	ror	r23
 33a:	67 95       	ror	r22
 33c:	b7 95       	ror	r27
 33e:	f1 11       	cpse	r31, r1
 340:	f8 cf       	rjmp	.-16     	; 0x332 <__floatsisf+0x1c>
 342:	fa f4       	brpl	.+62     	; 0x382 <__floatsisf+0x6c>
 344:	bb 0f       	add	r27, r27
 346:	11 f4       	brne	.+4      	; 0x34c <__floatsisf+0x36>
 348:	60 ff       	sbrs	r22, 0
 34a:	1b c0       	rjmp	.+54     	; 0x382 <__floatsisf+0x6c>
 34c:	6f 5f       	subi	r22, 0xFF	; 255
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	8f 4f       	sbci	r24, 0xFF	; 255
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	16 c0       	rjmp	.+44     	; 0x382 <__floatsisf+0x6c>
 356:	88 23       	and	r24, r24
 358:	11 f0       	breq	.+4      	; 0x35e <__floatsisf+0x48>
 35a:	96 e9       	ldi	r25, 0x96	; 150
 35c:	11 c0       	rjmp	.+34     	; 0x380 <__floatsisf+0x6a>
 35e:	77 23       	and	r23, r23
 360:	21 f0       	breq	.+8      	; 0x36a <__floatsisf+0x54>
 362:	9e e8       	ldi	r25, 0x8E	; 142
 364:	87 2f       	mov	r24, r23
 366:	76 2f       	mov	r23, r22
 368:	05 c0       	rjmp	.+10     	; 0x374 <__floatsisf+0x5e>
 36a:	66 23       	and	r22, r22
 36c:	71 f0       	breq	.+28     	; 0x38a <__floatsisf+0x74>
 36e:	96 e8       	ldi	r25, 0x86	; 134
 370:	86 2f       	mov	r24, r22
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	2a f0       	brmi	.+10     	; 0x382 <__floatsisf+0x6c>
 378:	9a 95       	dec	r25
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	da f7       	brpl	.-10     	; 0x378 <__floatsisf+0x62>
 382:	88 0f       	add	r24, r24
 384:	96 95       	lsr	r25
 386:	87 95       	ror	r24
 388:	97 f9       	bld	r25, 7
 38a:	08 95       	ret

0000038c <__fp_cmp>:
 38c:	99 0f       	add	r25, r25
 38e:	00 08       	sbc	r0, r0
 390:	55 0f       	add	r21, r21
 392:	aa 0b       	sbc	r26, r26
 394:	e0 e8       	ldi	r30, 0x80	; 128
 396:	fe ef       	ldi	r31, 0xFE	; 254
 398:	16 16       	cp	r1, r22
 39a:	17 06       	cpc	r1, r23
 39c:	e8 07       	cpc	r30, r24
 39e:	f9 07       	cpc	r31, r25
 3a0:	c0 f0       	brcs	.+48     	; 0x3d2 <__fp_cmp+0x46>
 3a2:	12 16       	cp	r1, r18
 3a4:	13 06       	cpc	r1, r19
 3a6:	e4 07       	cpc	r30, r20
 3a8:	f5 07       	cpc	r31, r21
 3aa:	98 f0       	brcs	.+38     	; 0x3d2 <__fp_cmp+0x46>
 3ac:	62 1b       	sub	r22, r18
 3ae:	73 0b       	sbc	r23, r19
 3b0:	84 0b       	sbc	r24, r20
 3b2:	95 0b       	sbc	r25, r21
 3b4:	39 f4       	brne	.+14     	; 0x3c4 <__fp_cmp+0x38>
 3b6:	0a 26       	eor	r0, r26
 3b8:	61 f0       	breq	.+24     	; 0x3d2 <__fp_cmp+0x46>
 3ba:	23 2b       	or	r18, r19
 3bc:	24 2b       	or	r18, r20
 3be:	25 2b       	or	r18, r21
 3c0:	21 f4       	brne	.+8      	; 0x3ca <__fp_cmp+0x3e>
 3c2:	08 95       	ret
 3c4:	0a 26       	eor	r0, r26
 3c6:	09 f4       	brne	.+2      	; 0x3ca <__fp_cmp+0x3e>
 3c8:	a1 40       	sbci	r26, 0x01	; 1
 3ca:	a6 95       	lsr	r26
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	81 1d       	adc	r24, r1
 3d0:	81 1d       	adc	r24, r1
 3d2:	08 95       	ret

000003d4 <__fp_split3>:
 3d4:	57 fd       	sbrc	r21, 7
 3d6:	90 58       	subi	r25, 0x80	; 128
 3d8:	44 0f       	add	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	59 f0       	breq	.+22     	; 0x3f4 <__fp_splitA+0x10>
 3de:	5f 3f       	cpi	r21, 0xFF	; 255
 3e0:	71 f0       	breq	.+28     	; 0x3fe <__fp_splitA+0x1a>
 3e2:	47 95       	ror	r20

000003e4 <__fp_splitA>:
 3e4:	88 0f       	add	r24, r24
 3e6:	97 fb       	bst	r25, 7
 3e8:	99 1f       	adc	r25, r25
 3ea:	61 f0       	breq	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ec:	9f 3f       	cpi	r25, 0xFF	; 255
 3ee:	79 f0       	breq	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f0:	87 95       	ror	r24
 3f2:	08 95       	ret
 3f4:	12 16       	cp	r1, r18
 3f6:	13 06       	cpc	r1, r19
 3f8:	14 06       	cpc	r1, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	f2 cf       	rjmp	.-28     	; 0x3e2 <__fp_split3+0xe>
 3fe:	46 95       	lsr	r20
 400:	f1 df       	rcall	.-30     	; 0x3e4 <__fp_splitA>
 402:	08 c0       	rjmp	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	16 16       	cp	r1, r22
 406:	17 06       	cpc	r1, r23
 408:	18 06       	cpc	r1, r24
 40a:	99 1f       	adc	r25, r25
 40c:	f1 cf       	rjmp	.-30     	; 0x3f0 <__fp_splitA+0xc>
 40e:	86 95       	lsr	r24
 410:	71 05       	cpc	r23, r1
 412:	61 05       	cpc	r22, r1
 414:	08 94       	sec
 416:	08 95       	ret

00000418 <__fp_zero>:
 418:	e8 94       	clt

0000041a <__fp_szero>:
 41a:	bb 27       	eor	r27, r27
 41c:	66 27       	eor	r22, r22
 41e:	77 27       	eor	r23, r23
 420:	cb 01       	movw	r24, r22
 422:	97 f9       	bld	r25, 7
 424:	08 95       	ret

00000426 <__gesf2>:
 426:	b2 df       	rcall	.-156    	; 0x38c <__fp_cmp>
 428:	08 f4       	brcc	.+2      	; 0x42c <__gesf2+0x6>
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	08 95       	ret

0000042e <__mulsf3>:
 42e:	0b d0       	rcall	.+22     	; 0x446 <__mulsf3x>
 430:	78 c0       	rjmp	.+240    	; 0x522 <__fp_round>
 432:	69 d0       	rcall	.+210    	; 0x506 <__fp_pscA>
 434:	28 f0       	brcs	.+10     	; 0x440 <__mulsf3+0x12>
 436:	6e d0       	rcall	.+220    	; 0x514 <__fp_pscB>
 438:	18 f0       	brcs	.+6      	; 0x440 <__mulsf3+0x12>
 43a:	95 23       	and	r25, r21
 43c:	09 f0       	breq	.+2      	; 0x440 <__mulsf3+0x12>
 43e:	5a c0       	rjmp	.+180    	; 0x4f4 <__fp_inf>
 440:	5f c0       	rjmp	.+190    	; 0x500 <__fp_nan>
 442:	11 24       	eor	r1, r1
 444:	ea cf       	rjmp	.-44     	; 0x41a <__fp_szero>

00000446 <__mulsf3x>:
 446:	c6 df       	rcall	.-116    	; 0x3d4 <__fp_split3>
 448:	a0 f3       	brcs	.-24     	; 0x432 <__mulsf3+0x4>

0000044a <__mulsf3_pse>:
 44a:	95 9f       	mul	r25, r21
 44c:	d1 f3       	breq	.-12     	; 0x442 <__mulsf3+0x14>
 44e:	95 0f       	add	r25, r21
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	55 1f       	adc	r21, r21
 454:	62 9f       	mul	r22, r18
 456:	f0 01       	movw	r30, r0
 458:	72 9f       	mul	r23, r18
 45a:	bb 27       	eor	r27, r27
 45c:	f0 0d       	add	r31, r0
 45e:	b1 1d       	adc	r27, r1
 460:	63 9f       	mul	r22, r19
 462:	aa 27       	eor	r26, r26
 464:	f0 0d       	add	r31, r0
 466:	b1 1d       	adc	r27, r1
 468:	aa 1f       	adc	r26, r26
 46a:	64 9f       	mul	r22, r20
 46c:	66 27       	eor	r22, r22
 46e:	b0 0d       	add	r27, r0
 470:	a1 1d       	adc	r26, r1
 472:	66 1f       	adc	r22, r22
 474:	82 9f       	mul	r24, r18
 476:	22 27       	eor	r18, r18
 478:	b0 0d       	add	r27, r0
 47a:	a1 1d       	adc	r26, r1
 47c:	62 1f       	adc	r22, r18
 47e:	73 9f       	mul	r23, r19
 480:	b0 0d       	add	r27, r0
 482:	a1 1d       	adc	r26, r1
 484:	62 1f       	adc	r22, r18
 486:	83 9f       	mul	r24, r19
 488:	a0 0d       	add	r26, r0
 48a:	61 1d       	adc	r22, r1
 48c:	22 1f       	adc	r18, r18
 48e:	74 9f       	mul	r23, r20
 490:	33 27       	eor	r19, r19
 492:	a0 0d       	add	r26, r0
 494:	61 1d       	adc	r22, r1
 496:	23 1f       	adc	r18, r19
 498:	84 9f       	mul	r24, r20
 49a:	60 0d       	add	r22, r0
 49c:	21 1d       	adc	r18, r1
 49e:	82 2f       	mov	r24, r18
 4a0:	76 2f       	mov	r23, r22
 4a2:	6a 2f       	mov	r22, r26
 4a4:	11 24       	eor	r1, r1
 4a6:	9f 57       	subi	r25, 0x7F	; 127
 4a8:	50 40       	sbci	r21, 0x00	; 0
 4aa:	8a f0       	brmi	.+34     	; 0x4ce <__mulsf3_pse+0x84>
 4ac:	e1 f0       	breq	.+56     	; 0x4e6 <__mulsf3_pse+0x9c>
 4ae:	88 23       	and	r24, r24
 4b0:	4a f0       	brmi	.+18     	; 0x4c4 <__mulsf3_pse+0x7a>
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	bb 1f       	adc	r27, r27
 4b8:	66 1f       	adc	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	91 50       	subi	r25, 0x01	; 1
 4c0:	50 40       	sbci	r21, 0x00	; 0
 4c2:	a9 f7       	brne	.-22     	; 0x4ae <__mulsf3_pse+0x64>
 4c4:	9e 3f       	cpi	r25, 0xFE	; 254
 4c6:	51 05       	cpc	r21, r1
 4c8:	70 f0       	brcs	.+28     	; 0x4e6 <__mulsf3_pse+0x9c>
 4ca:	14 c0       	rjmp	.+40     	; 0x4f4 <__fp_inf>
 4cc:	a6 cf       	rjmp	.-180    	; 0x41a <__fp_szero>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	ec f3       	brlt	.-6      	; 0x4cc <__mulsf3_pse+0x82>
 4d2:	98 3e       	cpi	r25, 0xE8	; 232
 4d4:	dc f3       	brlt	.-10     	; 0x4cc <__mulsf3_pse+0x82>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	e7 95       	ror	r30
 4e2:	9f 5f       	subi	r25, 0xFF	; 255
 4e4:	c1 f7       	brne	.-16     	; 0x4d6 <__mulsf3_pse+0x8c>
 4e6:	fe 2b       	or	r31, r30
 4e8:	88 0f       	add	r24, r24
 4ea:	91 1d       	adc	r25, r1
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret

000004f4 <__fp_inf>:
 4f4:	97 f9       	bld	r25, 7
 4f6:	9f 67       	ori	r25, 0x7F	; 127
 4f8:	80 e8       	ldi	r24, 0x80	; 128
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	08 95       	ret

00000500 <__fp_nan>:
 500:	9f ef       	ldi	r25, 0xFF	; 255
 502:	80 ec       	ldi	r24, 0xC0	; 192
 504:	08 95       	ret

00000506 <__fp_pscA>:
 506:	00 24       	eor	r0, r0
 508:	0a 94       	dec	r0
 50a:	16 16       	cp	r1, r22
 50c:	17 06       	cpc	r1, r23
 50e:	18 06       	cpc	r1, r24
 510:	09 06       	cpc	r0, r25
 512:	08 95       	ret

00000514 <__fp_pscB>:
 514:	00 24       	eor	r0, r0
 516:	0a 94       	dec	r0
 518:	12 16       	cp	r1, r18
 51a:	13 06       	cpc	r1, r19
 51c:	14 06       	cpc	r1, r20
 51e:	05 06       	cpc	r0, r21
 520:	08 95       	ret

00000522 <__fp_round>:
 522:	09 2e       	mov	r0, r25
 524:	03 94       	inc	r0
 526:	00 0c       	add	r0, r0
 528:	11 f4       	brne	.+4      	; 0x52e <__fp_round+0xc>
 52a:	88 23       	and	r24, r24
 52c:	52 f0       	brmi	.+20     	; 0x542 <__fp_round+0x20>
 52e:	bb 0f       	add	r27, r27
 530:	40 f4       	brcc	.+16     	; 0x542 <__fp_round+0x20>
 532:	bf 2b       	or	r27, r31
 534:	11 f4       	brne	.+4      	; 0x53a <__fp_round+0x18>
 536:	60 ff       	sbrs	r22, 0
 538:	04 c0       	rjmp	.+8      	; 0x542 <__fp_round+0x20>
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <_exit>:
 544:	f8 94       	cli

00000546 <__stop_program>:
 546:	ff cf       	rjmp	.-2      	; 0x546 <__stop_program>
