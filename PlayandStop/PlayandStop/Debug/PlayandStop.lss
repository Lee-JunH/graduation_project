
PlayandStop.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000296  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b64  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000834  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000401  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000420  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000326  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	ee c0       	rjmp	.+476    	; 0x292 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define __DELAY_BACKWARD_COMPATIBLE__
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2c 97       	sbiw	r28, 0x0c	; 12
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
  d0:	84 bb       	out	0x14, r24	; 20
	DDRE=DDRE & ~(1<<PINE4) & ~(1<<PINE5);
  d2:	92 b1       	in	r25, 0x02	; 2
  d4:	9f 7c       	andi	r25, 0xCF	; 207
  d6:	92 b9       	out	0x02, r25	; 2
	DDRG=0xFF;
  d8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTA=0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8b bb       	out	0x1b, r24	; 27
	unsigned char play_pattern[]={0x73, 0x38, 0x77, 0x66, 0x6D, 0x78, 0x3F, 0x73};
  e0:	98 e0       	ldi	r25, 0x08	; 8
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	11 96       	adiw	r26, 0x01	; 1
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	9a 95       	dec	r25
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x32>
	unsigned char fnd_pattern[]={0x08, 0x04,0x02, 0x01};
  f2:	98 e0       	ldi	r25, 0x08	; 8
  f4:	99 87       	std	Y+9, r25	; 0x09
  f6:	94 e0       	ldi	r25, 0x04	; 4
  f8:	9a 87       	std	Y+10, r25	; 0x0a
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	9b 87       	std	Y+11, r25	; 0x0b
  fe:	8c 87       	std	Y+12, r24	; 0x0c
	int direc=-1;
 100:	4f ef       	ldi	r20, 0xFF	; 255
 102:	5f ef       	ldi	r21, 0xFF	; 255
	int count=0;
	
	while(1)
	{
		//스위치1 누르면 PLAY 출력 P:a,b,e,f,g(0x73) | L:d,e,f(0x38) | A:a,b,c,e,f,g(0x77) | Y:b,c,f,g(0x66)
		if(!(PINE & (1<<PINE4)))
 104:	0c 99       	sbic	0x01, 4	; 1
 106:	3e c0       	rjmp	.+124    	; 0x184 <main+0xcc>
		{
			count=0;
			if(direc==-1)
 108:	4f 3f       	cpi	r20, 0xFF	; 255
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	52 07       	cpc	r21, r18
 10e:	41 f4       	brne	.+16     	; 0x120 <main+0x68>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 110:	80 ea       	ldi	r24, 0xA0	; 160
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x5c>
			{
				_delay_ms(1);
				PORTA=PORTA<<1;
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	88 0f       	add	r24, r24
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	07 c0       	rjmp	.+14     	; 0x12e <main+0x76>
 120:	80 ea       	ldi	r24, 0xA0	; 160
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x6c>
			}
			else
			{
				_delay_ms(1);
				PORTA=PORTA>>1;
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	86 95       	lsr	r24
 12c:	8b bb       	out	0x1b, r24	; 27
			}
			if(PORTA==0x80)direc=1;
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	80 38       	cpi	r24, 0x80	; 128
 132:	11 f4       	brne	.+4      	; 0x138 <main+0x80>
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	50 e0       	ldi	r21, 0x00	; 0
			if(PORTA==0x01)direc=-1;
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	01 f5       	brne	.+64     	; 0x17e <main+0xc6>
 13e:	1d c0       	rjmp	.+58     	; 0x17a <main+0xc2>
			
			while(!(PINE & (1<<PINE4)))
			{
				for(int i=0;i<4;i++)
				{
					PORTG=fnd_pattern[i];
 140:	e9 e0       	ldi	r30, 0x09	; 9
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e8 0f       	add	r30, r24
 14a:	f9 1f       	adc	r31, r25
 14c:	20 81       	ld	r18, Z
 14e:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
					PORTC=play_pattern[i];
 152:	e1 e0       	ldi	r30, 0x01	; 1
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ec 0f       	add	r30, r28
 158:	fd 1f       	adc	r31, r29
 15a:	e8 0f       	add	r30, r24
 15c:	f9 1f       	adc	r31, r25
 15e:	20 81       	ld	r18, Z
 160:	25 bb       	out	0x15, r18	; 21
 162:	e0 ea       	ldi	r30, 0xA0	; 160
 164:	ff e0       	ldi	r31, 0x0F	; 15
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0xae>
			if(PORTA==0x80)direc=1;
			if(PORTA==0x01)direc=-1;
			
			while(!(PINE & (1<<PINE4)))
			{
				for(int i=0;i<4;i++)
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xba>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	91 05       	cpc	r25, r1
 176:	24 f3       	brlt	.-56     	; 0x140 <main+0x88>
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0xc6>
			{
				_delay_ms(1);
				PORTA=PORTA>>1;
			}
			if(PORTA==0x80)direc=1;
			if(PORTA==0x01)direc=-1;
 17a:	4f ef       	ldi	r20, 0xFF	; 255
 17c:	5f ef       	ldi	r21, 0xFF	; 255
			
			while(!(PINE & (1<<PINE4)))
 17e:	0c 9b       	sbis	0x01, 4	; 1
 180:	f6 cf       	rjmp	.-20     	; 0x16e <main+0xb6>
 182:	c0 cf       	rjmp	.-128    	; 0x104 <main+0x4c>
					_delay_ms(1);
				}
			}
		}
		//스위치2 누르면 STOP S:a,c,d,f,g(0x6D) | t:d,e,f,g(0x78) | O:a,b,c,d,e,f(0x3F) | P:a,b,e,f,g(0x73)
		else if(!(PINE & (1<<PINE5)))
 184:	0d 9b       	sbis	0x01, 5	; 1
 186:	1c c0       	rjmp	.+56     	; 0x1c0 <main+0x108>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	7e c0       	rjmp	.+252    	; 0x28a <main+0x1d2>
		{
			count=0;
			for(int i=4;i<8;i++)
			{
				PORTG=fnd_pattern[i-4];
 18e:	fc 01       	movw	r30, r24
 190:	34 97       	sbiw	r30, 0x04	; 4
 192:	29 e0       	ldi	r18, 0x09	; 9
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	2c 0f       	add	r18, r28
 198:	3d 1f       	adc	r19, r29
 19a:	e2 0f       	add	r30, r18
 19c:	f3 1f       	adc	r31, r19
 19e:	20 81       	ld	r18, Z
 1a0:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
				PORTC=play_pattern[i];
 1a4:	e1 e0       	ldi	r30, 0x01	; 1
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ec 0f       	add	r30, r28
 1aa:	fd 1f       	adc	r31, r29
 1ac:	e8 0f       	add	r30, r24
 1ae:	f9 1f       	adc	r31, r25
 1b0:	20 81       	ld	r18, Z
 1b2:	25 bb       	out	0x15, r18	; 21
 1b4:	e0 ea       	ldi	r30, 0xA0	; 160
 1b6:	ff e0       	ldi	r31, 0x0F	; 15
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x100>
		}
		//스위치2 누르면 STOP S:a,c,d,f,g(0x6D) | t:d,e,f,g(0x78) | O:a,b,c,d,e,f(0x3F) | P:a,b,e,f,g(0x73)
		else if(!(PINE & (1<<PINE5)))
		{
			count=0;
			for(int i=4;i<8;i++)
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <main+0x10c>
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	88 30       	cpi	r24, 0x08	; 8
 1c6:	91 05       	cpc	r25, r1
 1c8:	14 f3       	brlt	.-60     	; 0x18e <main+0xd6>
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	43 c0       	rjmp	.+134    	; 0x256 <main+0x19e>
			}
			while(count!=2)
			{
				for(int i=4;i<8;i++)
				{
					PORTG=fnd_pattern[i-4];
 1d0:	fc 01       	movw	r30, r24
 1d2:	34 97       	sbiw	r30, 0x04	; 4
 1d4:	29 e0       	ldi	r18, 0x09	; 9
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	2c 0f       	add	r18, r28
 1da:	3d 1f       	adc	r19, r29
 1dc:	e2 0f       	add	r30, r18
 1de:	f3 1f       	adc	r31, r19
 1e0:	20 81       	ld	r18, Z
 1e2:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
					PORTC=play_pattern[i];
 1e6:	e1 e0       	ldi	r30, 0x01	; 1
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	e8 0f       	add	r30, r24
 1f0:	f9 1f       	adc	r31, r25
 1f2:	20 81       	ld	r18, Z
 1f4:	25 bb       	out	0x15, r18	; 21
 1f6:	e0 ea       	ldi	r30, 0xA0	; 160
 1f8:	ff e0       	ldi	r31, 0x0F	; 15
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x142>
				PORTC=play_pattern[i];
				_delay_ms(1);
			}
			while(count!=2)
			{
				for(int i=4;i<8;i++)
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	02 c0       	rjmp	.+4      	; 0x206 <main+0x14e>
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	91 05       	cpc	r25, r1
 20a:	14 f3       	brlt	.-60     	; 0x1d0 <main+0x118>
				{
					PORTG=fnd_pattern[i-4];
					PORTC=play_pattern[i];
					_delay_ms(1);
				}
				if(!(PINE & (1<<PINE5)))
 20c:	0d 99       	sbic	0x01, 5	; 1
 20e:	23 c0       	rjmp	.+70     	; 0x256 <main+0x19e>
				{
					count=count+1;
 210:	6f 5f       	subi	r22, 0xFF	; 255
 212:	7f 4f       	sbci	r23, 0xFF	; 255
					while(!(PINE & (1<<PINE5)))
 214:	1e c0       	rjmp	.+60     	; 0x252 <main+0x19a>
					{
						for(int i=4;i<8;i++)
						{
							PORTG=fnd_pattern[i-4];
 216:	fc 01       	movw	r30, r24
 218:	34 97       	sbiw	r30, 0x04	; 4
 21a:	29 e0       	ldi	r18, 0x09	; 9
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	2c 0f       	add	r18, r28
 220:	3d 1f       	adc	r19, r29
 222:	e2 0f       	add	r30, r18
 224:	f3 1f       	adc	r31, r19
 226:	20 81       	ld	r18, Z
 228:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
							PORTC=play_pattern[i];
 22c:	e1 e0       	ldi	r30, 0x01	; 1
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ec 0f       	add	r30, r28
 232:	fd 1f       	adc	r31, r29
 234:	e8 0f       	add	r30, r24
 236:	f9 1f       	adc	r31, r25
 238:	20 81       	ld	r18, Z
 23a:	25 bb       	out	0x15, r18	; 21
 23c:	e0 ea       	ldi	r30, 0xA0	; 160
 23e:	ff e0       	ldi	r31, 0x0F	; 15
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x188>
				if(!(PINE & (1<<PINE5)))
				{
					count=count+1;
					while(!(PINE & (1<<PINE5)))
					{
						for(int i=4;i<8;i++)
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	02 c0       	rjmp	.+4      	; 0x24c <main+0x194>
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	91 05       	cpc	r25, r1
 250:	14 f3       	brlt	.-60     	; 0x216 <main+0x15e>
					_delay_ms(1);
				}
				if(!(PINE & (1<<PINE5)))
				{
					count=count+1;
					while(!(PINE & (1<<PINE5)))
 252:	0d 9b       	sbis	0x01, 5	; 1
 254:	f9 cf       	rjmp	.-14     	; 0x248 <main+0x190>
			{
				PORTG=fnd_pattern[i-4];
				PORTC=play_pattern[i];
				_delay_ms(1);
			}
			while(count!=2)
 256:	62 30       	cpi	r22, 0x02	; 2
 258:	71 05       	cpc	r23, r1
 25a:	99 f6       	brne	.-90     	; 0x202 <main+0x14a>
 25c:	53 cf       	rjmp	.-346    	; 0x104 <main+0x4c>
		//버튼을 누르지 않을 때
		else
		{
			for(int i=0;i<4;i++)
			{
				PORTG=fnd_pattern[i];
 25e:	e9 e0       	ldi	r30, 0x09	; 9
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	20 81       	ld	r18, Z
 26c:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
				PORTC=play_pattern[i];
 270:	e1 e0       	ldi	r30, 0x01	; 1
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	ec 0f       	add	r30, r28
 276:	fd 1f       	adc	r31, r29
 278:	e8 0f       	add	r30, r24
 27a:	f9 1f       	adc	r31, r25
 27c:	20 81       	ld	r18, Z
 27e:	25 bb       	out	0x15, r18	; 21
 280:	e0 ea       	ldi	r30, 0xA0	; 160
 282:	ff e0       	ldi	r31, 0x0F	; 15
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x1cc>
			}
		}
		//버튼을 누르지 않을 때
		else
		{
			for(int i=0;i<4;i++)
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	91 05       	cpc	r25, r1
 28e:	3c f3       	brlt	.-50     	; 0x25e <main+0x1a6>
 290:	39 cf       	rjmp	.-398    	; 0x104 <main+0x4c>

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
